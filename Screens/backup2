import React from "react";
import {
    StyleSheet,
    Text,
    View,
    ScrollView,
    Animated,
    SafeAreaView,
    Dimensions,
    StatusBar,
    TouchableWithoutFeedback,
    FlatList,
    TouchableOpacity,
    
} from "react-native";
import DateTimePicker from '@react-native-community/datetimepicker';
import { AntDesign } from '@expo/vector-icons';
import * as Animatable from 'react-native-animatable';
import settings from '../AppSettings';
import { Fontisto } from '@expo/vector-icons';
import moment from 'moment';
import { connect } from 'react-redux';
import { selectTheme } from '../actions';
const AnimatedFlatlist =Animated.createAnimatedComponent(FlatList)
const fontFamily = settings.fontFamily;
const themeColor =settings.themeColor
const cardHeight = 250;
const MARGIN = 20
const CARD_HEIGHT =cardHeight+MARGIN*2
const cardTitle = 75;
const cardPadding = 20;

const { height } = Dimensions.get("window");
const cards = [
    {
        name: "Sri clinic",
        color: themeColor,
        doctor:"kamaraj",
        No:"7010117137"
    },
    {
        name: "Ram clinic",
        color: "#eba65c",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "take care hospital",
        color: "#ffff",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Make well",
        color: "#eba",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Sri clinic",
        color: themeColor,
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Ram clinic",
        color: "#eba65c",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "take care hospital",
        color: "#ffff",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Make well",
        color: "#eba",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Sri clinic",
        color: themeColor,
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Ram clinic",
        color: "#eba65c",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "take care hospital",
        color: "#ffff",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Make well",
        color: "#eba",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Sri clinic",
        color: themeColor,
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Ram clinic",
        color: "#eba65c",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "take care hospital",
        color: "#ffff",
        doctor: "kamaraj",
        No: "7010117137"
    },
    {
        name: "Make well",
        color: "#eba",
        doctor: "kamaraj",
        No: "7010117137"
    },
 
];

class Priscription extends React.Component {
    constructor(props) {
        const Date1 = new Date()
        const day = Date1.getDate()
        const month = Date1.getMonth() + 1
        const year = Date1.getFullYear()
        const today = `${year}-${month}-${day}`
     
        super(props);
        this.state = {
            fadeAnim: new Animated.Value(0),
            y: new Animated.Value(0),
            showList: true,
            today,
            mode: 'date',
            date: new Date(),
            show: false,
        };
    }
    onChange = (selectedDate) => {
        if (selectedDate.type == "set") {
            this.setState({ today: moment(new Date(selectedDate.nativeEvent.timestamp)).format('YYYY-MM-DD'), show: false, date: new Date(selectedDate.nativeEvent.timestamp) }, () => {
                console.log(this.state.today,  "jjjj")
                
            })

        } else {
            return null
        }

    }
    render() {
        const y= new Animated.Value(0);
        const onScroll = Animated.event([{nativeEvent:{contentOffset:{y}}}],{
            useNativeDriver:true
        })
        return (
           
            <>
                <SafeAreaView style={styles.topSafeArea} />
                <SafeAreaView style={styles.bottomSafeArea}>
                <StatusBar backgroundColor={themeColor} barStyle={'dark-content'} translucent={false} />
          
            <View style={{flex:1,backgroundColor:"#f3f3f3f3"}}>
           
                  {/* HEADERS */}
                <View style={{ height: height * 0.1, backgroundColor: themeColor,borderBottomRightRadius:20,borderBottomLeftRadius:20 ,justifyContent:"center"}}>
                      <View>
                          <Text style={{color:'#fff',fontFamily:"openSans",marginLeft:20}}>Welcome kamaraj,</Text>  
                      </View>
                </View>
                <View style={{height: height * 0.07,alignItems:"center",justifyContent:"center",flexDirection:"row"}}>
                    <Text style={[styles.text,{ color: "#000" }]}>{this.state.today}</Text>
                        <TouchableOpacity
                      style={{marginLeft:20}} 
                      onPress={()=>{this.setState({show:true})}}
                    >
                        <Fontisto name="date" size={24} color={themeColor} />
                    </TouchableOpacity>
                    {this.state.show && (
                        <DateTimePicker
                            testID="dateTimePicker1"
                            value={this.state.date}
                            mode={this.state.mode}
                            is24Hour={true}
                            display="default"
                            onChange={(time) => { this.onChange(time) }}
                        />
                    )}
                </View>
          
                 <AnimatedFlatlist
                   showsVerticalScrollIndicator={false}
                    scrollEventThrottle={16}
                    bounces={false}
                    style={{ marginBottom: 90 }}
                    data={cards}
                    onEndReachedThreshold={0.1}
                    onEndReached={()=>{console.log("eeee")}}
                    keyExtractor={(item,index)=>{index.toString()}}
                    {...{onScroll}}
                    renderItem={({item,index})=>{
                        const position = Animated.subtract(index*CARD_HEIGHT,y);
                        const isDisappearing = -CARD_HEIGHT;
                        const isTop =0;
                        const isBottom =(height-90)-CARD_HEIGHT;
                        const isAppearing = height-90;
                        const translateY = Animated.add(
                            Animated.add(
                                y,
                                y.interpolate({
                                    inputRange: [0, 0.00001 + index * CARD_HEIGHT],
                                    outputRange: [0, -index * CARD_HEIGHT],
                                    extrapolateRight: 'clamp',
                                })
                            ),
                            position.interpolate({
                                inputRange:[isBottom,isAppearing],
                                outputRange:[0,-CARD_HEIGHT/4],
                                extrapolate:"clamp",
                            })
                        ) 
                        const scale = position.interpolate({
                            inputRange:[isDisappearing,isTop,isBottom,isAppearing],
                            outputRange:[0.5,1,1,0.5],
                            extrapolate:'clamp',

                        })
                        const opacity = position.interpolate({
                            inputRange: [isDisappearing, isTop, isBottom, isAppearing],
                            outputRange: [0.5, 1, 1, 0.5],
                            extrapolate: 'clamp',

                        })
                       return(
                           <TouchableWithoutFeedback 
                               onPress={() => { this.props.navigation.navigate('showCard',{item})}}
                           >
                               <Animated.View style={[styles.card, { backgroundColor: "#fff", transform: [{ translateY }, { scale },] }]}>

                               </Animated.View>
                           </TouchableWithoutFeedback>
                          
                       )
                    }}
                 />   
            

                        <View style={{
                            position: "absolute",
                            bottom: 100,
                            left: 20,
                            right: 20,
                            flex: 1,
                            alignItems: "center",
                            justifyContent: "center",

                            borderRadius: 20
                        }}>
                            <TouchableOpacity
                                onPress={() => { this.props.navigation.navigate('addPriscription') }}
                            >
                                <AntDesign name="pluscircle" size={40} color={themeColor} />
                            </TouchableOpacity>
                        </View>
            </View>
         </SafeAreaView>
        
        </>
        );
    }
}

const styles = StyleSheet.create({
    text:{
       fontFamily
    },
    root: {
         flex:1,
         marginHorizontal:20
    },
    container: {
        flex: 1
    },
    content: {
        height: height * 2
    },
    card: {
        
        height: cardHeight,
        borderRadius: 10,
        shadowColor: "#000",
        shadowOffset: {
            width: 0,
            height: 4,
        },
        shadowOpacity: 0,
        shadowRadius: 4.65,
         margin:20,
        elevation: 6,
       
    },
    topSafeArea: {
        flex: 0,
        backgroundColor: themeColor
    },
    bottomSafeArea: {
        flex: 1,
        backgroundColor: "#fff"
    },
});
const mapStateToProps = (state) => {

    return {
        theme: state.selectedTheme,

    }
}
export default connect(mapStateToProps, { selectTheme })(Priscription)